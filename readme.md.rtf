{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset177 ArialHebrewScholar;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18560\viewh11660\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf0 Readme
\f1 .
\f0 md
\f1 \
\
\

\f0 # ThreadPool
\f1 \
\

\f0 This is my implementation
\f1  
\f0 of thread pool based on the executor service framework. \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 ThreadPool is used to reduce the overhead needed to create new threads and add another abstraction layer so that the user doesn\'92t have to deal with creating \\ managing threads. \
Built on top of a waitable priority queue.\
\
\
## Methods\
\
# Submit\
Method to create the new task with its priority and push it to the queue. \
\
# SetNumOfThread\
Method that used to control the number of active threads.\
\
# Shutdown\
Terminate the thread pool and stop all the threads after completion of all the tasks in queue. \
\
# awaitTermination \
Terminate the thread pool after the current task of each thread has completed.}